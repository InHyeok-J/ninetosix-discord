on:
  push:
    branches: [ "main" ]

  workflow_dispatch:

env:
  VERSION: ${{github.sha}}
  ECR_URI: 396608805911.dkr.ecr.ap-northeast-2.amazonaws.com/ninetosix # docker ecr 주소
  NAME: discord-server # docker service name


jobs:
  gradle-docker-build:
    runs-on: ubuntu-20.04
    outputs:
      DOCKER_TAG: ${{steps.setUpDockerTag.outputs.DOCKER_TAG}}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - name: save into application.properties
        env:
          DEV_VARIABLES: ${{ toJson(secrets) }}
        run: |
          echo "$DEV_VARIABLES" | jq -r 'to_entries | 
          map(select(.key | startswith("APP_")))[] | "\(.key | sub("^APP_"; ""))=\(.value)"' > ./src/main/resources/application.properties
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: gradle build
        run: |
          echo "GRADLE BUILD START==============" 
          ./gradlew clean 
          ./gradlew -x test build
      - name: setup dockerImage name
        id: setUpDockerTag
        run: |
          git fetch --tags
          GIT_TAG=$(git tag --sort=committerdate | tail -1 )
          if [ -z "$GIT_TAG" ]; then
            GIT_TAG="v0.0.0"
          fi
          
          DATE=$(date +'%Y%m%d%H%M') 
          COMMIT_SHA=$(git rev-parse --short HEAD) 
          DOCKER_TAG="${GIT_TAG}-${DATE}-${COMMIT_SHA}"
          DOCKER_IMAGE="${{env.ECR_URI}}:${DOCKER_TAG}"
          echo "dockerTag=${DOCKER_TAG}" 
          echo "DOCKER_IMAGE=${DOCKER_IMAGE}"
          echo "DOCKER_TAG=${DOCKER_TAG}"  >> $GITHUB_ENV
          echo "DOCKER_TAG=${DOCKER_TAG}" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT      
          cat $GITHUB_ENV      

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_KEY }}
          aws-region: ap-northeast-2
      - name: Set Up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker Layer
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache # cache의 대상을 정한다.
          key: "${{runner.os}}-buildx-${{env.version}}"
          restore-keys: |
              ${{ runner.os }}-buildx-
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          builder: ${{steps.buildx.outputs.name}}
          push: true
          tags: "${{env.ECR_URI}}:${{env.DOCKER_TAG}}"

  deploy:
    needs:
      - gradle-docker-build
    name: Deploy
    runs-on: [self-hosted, server]
    env:
      DOCKER_TAG: ${{needs.gradle-docker-build.outputs.DOCKER_TAG}}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Execute
        id: execute
        run: |
          docker stop ${{env.NAME}} && docker rm ${{env.NAME}}
            docker run -d -p 8080:8080 --name ${{env.NAME}} --network discord-bot "${{env.ECR_URI}}:${{env.DOCKER_TAG}}"
